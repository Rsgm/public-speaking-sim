{
  "_ SINGLE SERVER": "This builds a single, fully functional server image.",
  "_ NOTE": "/tmp/django.tar.gz and /tmp/worker.tar.gz must exist at compile time, otherwise you get a bad source error",
  "variables": {
    "zone": "",
    "account_file": ".account.json",
    "project": "",
    "image": "",
    "machine_type": "t2.nano",
    "ssh_user": "admin",
    "tar": "/tmp/server.tar.gz"
  },
  "builders": [
    {
      "name": "google",
      "type": "googlecompute",
      "zone": "{{user `zone`}}",
      "account_file": "{{ user `account_file`}}",
      "project_id": "{{user `project`}}",
      "source_image": "{{user `image`}}",
      "machine_type": "{{user `machine_type`}}",
      "ssh_username": "{{user `ssh_user`}}",
      "image_name": "speakeazy-{{timestamp}}"
    }
  ],
  "provisioners": [
    {
      "type": "shell-local",
      "command": "npm run build && tar --exclude-vcs-ignores -zcf {{user `tar`}} ./ ./.env.sh ./speakeazy/static/css/build.css"
    },
    {
      "type": "shell",
      "execute_command": "{{ .Vars }} sudo -E sh '{{ .Path }}'",
      "inline": [
        "echo ------ PREPARE SERVER ------",
        "#timeout 180 /bin/bash -c 'until stat /var/lib/cloud/instance/boot-finished 2>/dev/null; do echo waiting ...; sleep 1; done'",
        "apt-get update"
      ]
    },
    {
      "type": "file",
      "source": "{{user `tar`}}",
      "destination": "/tmp/server.tar.gz"
    },
    {
      "type": "shell",
      "execute_command": "{{ .Vars }} sudo -E sh '{{ .Path }}'",
      "inline": [
        "echo ------ SETTING UP APP DIRECTORY AND USERS ------",
        "",
        "groupadd -r django",
        "useradd -r -g django django",
        "mkdir /app",
        "chown django:django /app",
        "",
        "tar -zxf /tmp/server.tar.gz -C /app"
      ]
    },
    {
      "type": "shell",
      "execute_command": "{{ .Vars }} sudo -E sh '{{ .Path }}'",
      "inline": [
        "echo ------ SETTING VSFTP ------",
        "apt-get --no-install-recommends --no-install-suggests -y install vsftpd",
        "mv /app/devops/files/django/vsftpd.conf /etc/vsftpd.conf",
        "echo anonymous > /etc/vsftpd.allowed_users",
        "systemd enable vsftpd.service  # docker: Excess arguments.",
        "",
        "mkdir /ftp",
        "mkdir /ftp/recordings",
        "chmod 555 /ftp",
        "mount --bind /app/recordings /ftp/recordings"
      ]
    },
    {
      "type": "shell",
      "execute_command": "{{ .Vars }} sudo -E sh '{{ .Path }}'",
      "inline": [
        "echo ------ INSTALLING PYTHON DEPENDENCIES ------",
        "# install python and python dependencies for later",
        "apt-get --no-install-recommends --no-install-suggests -y install python3 python3-pip python3-pil python3-dev libjpeg-dev libjpeg62-turbo-dev zlib1g-dev gcc libffi-dev",
        "pip3 install --upgrade pip",
        "",
        "ln -s /usr/bin/python3 /usr/local/bin/python",
        "",
        "# install pip dependencies",
        "pip3 install -r /app/requirements/production.txt"
      ]
    },
    {
      "type": "shell",
      "execute_command": "{{ .Vars }} sudo -E sh '{{ .Path }}'",
      "script": "{{template_dir}}/files/nginx/setup.sh"
    },
    {
      "type": "shell",
      "execute_command": "{{ .Vars }} sudo -E sh '{{ .Path }}'",
      "script": "{{template_dir}}/files/django/setup.sh"
    },
    {
      "type": "shell",
      "execute_command": "{{ .Vars }} sudo -E sh '{{ .Path }}'",
      "script": "{{template_dir}}/files/worker/setup.sh"
    },
    {
      "type": "shell",
      "execute_command": "{{ .Vars }} sudo -E sh '{{ .Path }}'",
      "script": "{{template_dir}}/files/fix_permissions.sh"
    },
    {
      "type": "shell",
      "execute_command": "{{ .Vars }} sudo -E sh '{{ .Path }}'",
      "inline": [
        "sudo apt-get autoremove",
        "sudo apt-get clean"
      ]
    }
  ]
}
